// JavaScript source code
window.particlesJS = function (t, e) { var i = "particles-js", n = document.querySelector("#" + t) || document.querySelector("." + t); if (!n) return console.error("particles.js - No element found"), void 0; n.innerHTML = '<canvas class="particles-js-canvas-el" style="width: 100%; height: 100%;"></canvas>'; var a = n.querySelector(".particles-js-canvas-el"); var s = { particles: { number: { value: 80, density: { enable: !0, value_area: 800 } }, color: { value: "#ffffff" }, shape: { type: "circle", stroke: { width: 0, color: "#000000" }, polygon: { nb_sides: 5 }, image: { src: "", width: 100, height: 100 }, images: [] }, opacity: { value: .5, random: !1, anim: { enable: !1, speed: 1, opacity_min: .1, sync: !1 } }, size: { value: 3, random: !0, anim: { enable: !1, speed: 40, size_min: .1, sync: !1 } }, line_linked: { enable: !0, distance: 150, color: "#ffffff", opacity: .4, width: 1 }, move: { enable: !0, speed: 6, direction: "none", random: !1, straight: !1, out_mode: "out", bounce: !1, attract: { enable: !1, rotateX: 600, rotateY: 1200 } } }, interactivity: { detect_on: "canvas", events: { onhover: { enable: !0, mode: "repulse" }, onclick: { enable: !0, mode: "push" }, resize: !0 }, modes: { grab: { distance: 400, line_linked: { opacity: 1 } }, bubble: { distance: 400, size: 40, duration: 2, opacity: 8, speed: 3 }, repulse: { distance: 200, duration: .4 }, push: { particles_nb: 4 }, remove: { particles_nb: 2 } } }, retina_detect: !0 }; e && (s = Object.assign({}, s, e)); var r = {}; r.pJS = {}, r.pJS.canvas = { el: a, ctx: a.getContext("2d") }, r.pJS.particles = { array: [], nb: 0 }; var o = r.pJS; o.retina_detect && window.devicePixelRatio > 1 && (o.retina = 1.5, o.canvas.el.width = 2 * n.offsetWidth, o.canvas.el.height = 2 * n.offsetHeight, o.canvas.el.style.width = n.offsetWidth + "px", o.canvas.el.style.height = n.offsetHeight + "px"), o.canvas.w = o.canvas.el.width, o.canvas.h = o.canvas.el.height; for (var c = 0; c < s.particles.number.value; c++) { var p = {}; if (p.x = Math.random() * o.canvas.w, p.y = Math.random() * o.canvas.h, s.particles.shape.type === "image" && s.particles.shape.images.length > 0) { var l = s.particles.shape.images[Math.floor(Math.random() * s.particles.shape.images.length)]; p.img = { src: l.src, obj: null, ratio: l.width / l.height } } p.opacity = Math.random(), p.size = Math.random() * s.particles.size.value, p.color = s.particles.color.value, o.particles.array.push(p) } o.fn = {}, o.fn.draw = function () { o.canvas.ctx.clearRect(0, 0, o.canvas.w, o.canvas.h), o.particles.array.forEach(function (t) { var e = t.x, i = t.y, n = t.opacity, a = t.size; if (t.img && t.img.obj) { var s = o.canvas.ctx; s.save(), s.globalAlpha = n, s.translate(e, i), s.drawImage(t.img.obj, -a, -a, a * 2, a * 2), s.restore() } else { o.canvas.ctx.beginPath(), o.canvas.ctx.arc(e, i, a, 0, 2 * Math.PI), o.canvas.ctx.fillStyle = t.color, o.canvas.ctx.fill() } }) }, o.fn.particlesCreateImage = function () { o.particles.array.forEach(function (t) { if (t.img && t.img.src && !t.img.obj) { var e = new Image; e.src = t.img.src, t.img.obj = e } }) }, o.fn.update = function () { o.fn.draw() }, o.fn.particlesCreateImage(), (function t() { o.fn.update(), requestAnimationFrame(t) })() };
