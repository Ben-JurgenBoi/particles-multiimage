window.particlesJS = function (tag_id, params) { var canvas, ctx, w, h, particles = [], settings = params || {}, imagesList = [], weightedImages = [], mouse = { x: null, y: null }, animateFrame; function createCanvas() { var container = document.getElementById(tag_id); if (!container) return console.error("particlesJS: Container not found"); canvas = container.querySelector('canvas'); if (!canvas) { canvas = document.createElement('canvas'); canvas.style.width = "100%"; canvas.style.height = "100%"; container.appendChild(canvas) } ctx = canvas.getContext('2d'); resizeCanvas() } function resizeCanvas() { if (!canvas) return; w = canvas.width = canvas.offsetWidth; h = canvas.height = canvas.offsetHeight } function buildWeightedImages() { if (!imagesList.length) return; weightedImages = []; for (var i = 0; i < imagesList.length; i++) { var weight = imagesList[i].weight || 1; for (var j = 0; j < weight; j++)weightedImages.push(imagesList[i]) } } function Particle() { this.x = Math.random() * w; this.y = Math.random() * h; this.baseRadius = settings.particles?.size?.value || 10; this.radius = this.baseRadius; this.opacity = 0; this.targetOpacity = 1; this.fadeInSpeed = 0.02; this.color = settings.particles?.color?.value || "#ffffff"; this.speed = settings.particles?.move?.speed || 1.5; this.angle = Math.random() * 2 * Math.PI; if (weightedImages.length > 0) { var imgData = weightedImages[Math.floor(Math.random() * weightedImages.length)]; this.img = new Image; this.img.src = imgData.src; this.img.width = imgData.width; this.img.height = imgData.height } } Particle.prototype.update = function () { this.x += Math.cos(this.angle) * this.speed; this.y += Math.sin(this.angle) * this.speed; if (this.x > w) this.x = 0; if (this.x < 0) this.x = w; if (this.y > h) this.y = 0; if (this.y < 0) this.y = h; this.opacity = Math.min(this.opacity + this.fadeInSpeed, this.targetOpacity) }; Particle.prototype.draw = function (ctx) { ctx.save(); ctx.globalAlpha = this.opacity; ctx.translate(this.x, this.y); if (this.img) ctx.drawImage(this.img, -this.radius, -this.radius, 2 * this.radius, 2 * this.radius); else { ctx.beginPath(); ctx.arc(0, 0, this.radius, 0, 2 * Math.PI, false); ctx.fillStyle = this.color; ctx.fill() } ctx.restore() }; function initParticles() { particles = []; for (var i = 0; i < (settings.particles?.number?.value || 80); i++)particles.push(new Particle) } function animate() { if (!ctx) return; ctx.clearRect(0, 0, w, h); for (var i = 0; i < particles.length; i++) { var p = particles[i], dx = mouse.x - p.x, dy = mouse.y - p.y, dist = Math.sqrt(dx * dx + dy * dy); if (dist < 100) p.radius = Math.min(p.baseRadius * 1.5, 30); else p.radius = p.baseRadius; p.update(); p.draw(ctx) } animateFrame = requestAnimationFrame(animate) } function start() { createCanvas(); imagesList = settings.particles?.shape?.images || []; buildWeightedImages(); initParticles(); animateFrame = requestAnimationFrame(animate) } window.addEventListener('resize', resizeCanvas); window.addEventListener('mousemove', function (e) { mouse.x = e.clientX; mouse.y = e.clientY }); start() };
// JavaScript source code
